AWSTemplateFormatVersion: 2010-09-09
Description: >
  AWS CloudFormation Sample Template consist of: Network resources (VPC, 2 subnet), SecurityGroup, 2 Instances, LoadBalancer.
##########################################################
##########################################################
Parameters:
  Environment:
    Description: Environment name
    Type: String
    AllowedValues:
      - 'dev'
      - 'test'
      - 'stage'
      - 'prod'
    Default: 'dev'
    ConstraintDescription: You must choose one of 'dev', 'test', 'stage', 'prod'.
  
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: 'my_aws'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
    ConstraintDescription: must be a valid EC2 instance type.
  
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  
  HTTPLocation:
    Description: The IP address range that can be used to HTTP to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  
  VpcCidrBlock:
    Description: The CidrBlock for future Virtual private cloud
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.0.0/16
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  
  PublicSubnetCidrBlocks:
    Description: The CidrBlock for public subnet
    Type: CommaDelimitedList
    Default: '10.0.10.0/24, 10.0.20.0/24'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x,x.x.x.x/x.

##########################################################
##########################################################
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64

  AWSRegionArch2AMI:
    us-west-1:
      HVM64: ami-03ba3948f6c37a4b0
    us-west-2:
      HVM64: ami-0d1cd67c26f5fca19
    us-east-1:
      HVM64: ami-07ebfd5b3428b6f4d
    us-east-2:
      HVM64: ami-0fc20dd1da406780bd
    eu-central-1:
      HVM64: ami-0b418580298265d5c
    eu-west-1:
      HVM64: ami-035966e8adab4aaad
    eu-west-2:
      HVM64: ami-006a0174c6c25ac06

##########################################################
##########################################################
Resources:
##########################################################
# Create network resources
##########################################################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Join [ '_', ['CloudFormation_VPC', !Ref Environment] ]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: CloudFormation_IG

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: CloudFormation_Route_table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
       RouteTableId: !Ref PublicRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Ref PublicSubnetCidrBlocks]
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ '_', [ !Select [0, !GetAZs ''], !Ref Environment, 'public_subnet' ] ]

  PublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Ref PublicSubnetCidrBlocks]
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ '_', [ !Select [1, !GetAZs ''], !Ref Environment, 'public_subnet' ] ]

  PublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

##########################################################
# Create Security Group 
##########################################################
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDP_HTTP_ACCESS
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref SSHLocation
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: !Ref SSHLocation
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref HTTPLocation
      Tags:
        - Key: Name
          Value: CloudFormation_SG

##########################################################
# Create Instances
##########################################################
  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !GetAtt VPC.DefaultSecurityGroup
        - !GetAtt InstanceSecurityGroup.GroupId
      SubnetId: !Ref PublicSubnet1
      KeyName: !Ref KeyName
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update
          sudo apt-get -y install nginx
      Tags:
        - Key: Name
          Value: CloudFormation_example_web1

  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !GetAtt VPC.DefaultSecurityGroup
        - !GetAtt InstanceSecurityGroup.GroupId
      SubnetId: !Ref PublicSubnet2
      KeyName: !Ref KeyName
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update
          sudo apt-get -y install apache2
      Tags:
        - Key: Name
          Value: CloudFormation_example_web2

##########################################################
# Create LB
##########################################################
  LB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: 'ipv4'
      Name: CloudFormation-LB
      Scheme: internet-facing
      SecurityGroups: 
        - !GetAtt VPC.DefaultSecurityGroup
        - !Ref InstanceSecurityGroup
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      # Tags:
      #   - Key: Name
      #     Value: CloudFormation-LB
      Type: application

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Protocol: 'HTTP'
      Port: 80
      Name: CloudFormation-TargetGroup
      TargetType: 'instance'
      Targets:
        - Id: !Ref EC2Instance1
        - Id: !Ref EC2Instance2
      VpcId: !Ref VPC
    DependsOn: LB

  HTTPlistener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroup
      LoadBalancerArn: !Ref LB
      Port: 80
      Protocol: 'HTTP'
    DependsOn: [ LB, TargetGroup ]

##########################################################
##########################################################
Outputs:
  LBPublicDNS:
    Description: Public IP address of LB
    Value:
      Fn::Join:
        - ''
        - - 'http://'
          - Fn::GetAtt: LB.DNSName