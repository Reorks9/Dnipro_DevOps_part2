AWSTemplateFormatVersion: 2010-09-09
Description: >
  AWS CloudFormation Sample Template: Network resources (VPC, 2 subnet), SecurityGroup, 2 Instances, LoadBalancer.

##########################################################
##########################################################
Parameters:
  
  EnvironmentName:
    Description: Environment name
    Type: String
    AllowedValues:
      - 'dev'
      - 'test'
      - 'stage'
      - 'prod'
    Default: 'dev'
    ConstraintDescription: You must choose one of 'dev', 'test', 'stage', 'prod'.
  
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: 'win_key'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
    ConstraintDescription: must be a valid EC2 instance type.
  
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  
  HTTPLocation:
    Description: The IP address range that can be used to HTTP to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  
  VpcCidrBlock:
    Description: The CidrBlock for future Virtual private cloud
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 192.162.0.0/16
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  
  VpcInstanceTenancy:
    Description: The type of instance tenancy for your vpc
    Type: String
    AllowedValues:
      - 'default'
      - 'dedicated'
    Default: 'default'
    ConstraintDescription: must be a valid instance tenancy type.
  
  VpcEnableDnsHostnames:
    Description: Enable DNS hostnames in VPC?
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    ConstraintDescription: enter 'true' or 'false' value.
  
  VpcEnableDnsSupport:
    Description: The CidrBlock for future Virtual private cloud
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    ConstraintDescription: enter 'true' or 'false' value.
  
  PublicSubnetCidrBlocks:
    Description: The CidrBlock for public subnet
    Type: CommaDelimitedList
    Default: '192.162.0.0/24, 192.162.1.0/24, 192.162.2.0/24'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x,x.x.x.x/x.
  
  LBIpAddressType:
    Description: The IP address type. The possible values are ipv4 (for IPv4 addresses) and dualstack (for IPv4 and IPv6 addresses). Internal load balancers must use ipv4. Network Load Balancers must use ipv4.
    Type: String
    AllowedValues:
      - 'dualstack'
      - 'ipv4'
    Default: 'ipv4'
    ConstraintDescription: enter 'ipv4' or 'dualstack' for enable ipv6 also.
  
  LBScheme:
    Description: Allowed public access to load-balancer
    Type: String
    AllowedValues:
      - 'internal'
      - 'internet-facing'
    Default: 'internet-facing'
    ConstraintDescription: You must choose between 'internal' and 'internet-facing'.
  
  LBType: 
    Description: Type of balancing
    Type: String
    AllowedValues:
      - 'application'
      - 'network'
    Default: 'application'
    ConstraintDescription: You must choose between 'application' and 'network'.

##########################################################
##########################################################
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t1.micro:
      Arch: NATHVM64
    t2.nano:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
# for ubuntu instances
  AWSRegionArch2AMI:
    eu-central-1:
      HVM64: ami-0b418580298265d5c
    eu-west-1:
      HVM64: ami-035966e8adab4aaad
    eu-west-2:
      HVM64: ami-006a0174c6c25ac06
    eu-west-3:
      HVM64: ami-096b8af6e7e8fb927
    eu-north-1:
      HVM64: ami-0b7937aeb16a7eb94

##########################################################
##########################################################
Resources:
##########################################################
# Create network resources
##########################################################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: !Ref VpcEnableDnsSupport
      EnableDnsHostnames: !Ref VpcEnableDnsHostnames
      InstanceTenancy: !Ref VpcInstanceTenancy
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName  

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Ref PublicSubnetCidrBlocks]
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ ':', [ !Select [0, !GetAZs ''], !Ref EnvironmentName, 'subnet' ] ]

  PublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Ref PublicSubnetCidrBlocks]
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ ':', [ !Select [1, !GetAZs ''], !Ref EnvironmentName, 'subnet' ] ]

  PublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ ':', [!Ref EnvironmentName, 'PublicRouteTable' ] ]

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
       RouteTableId: !Ref PublicRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId: !Ref InternetGateway

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

##########################################################
# Create Security Group 
##########################################################
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDP_HTTP_ACCESS
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref SSHLocation
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: !Ref SSHLocation
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref HTTPLocation

##########################################################
# Create ec2 instances and run initial script
##########################################################
  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !GetAtt VPC.DefaultSecurityGroup
        - !GetAtt InstanceSecurityGroup.GroupId
      SubnetId: !Ref PublicSubnet1
      KeyName: !Ref KeyName
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update
          sudo apt-get install apache2 -y
      Tags:
        - Key: Name
          Value: !Join [ ':', [ !Select [0, !GetAZs ''], !Ref EnvironmentName, 'ec2' ] ]

  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !GetAtt VPC.DefaultSecurityGroup
        - !GetAtt InstanceSecurityGroup.GroupId
      SubnetId: !Ref PublicSubnet2
      KeyName: !Ref KeyName
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update
          sudo apt-get install nginx -y
      Tags:
        - Key: Name
          Value: !Join [ ':', [ !Select [1, !GetAZs ''], !Ref EnvironmentName, 'ec2' ] ]

##########################################################
# Create ELB and setup it
##########################################################
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: !Ref LBIpAddressType
      Name: !Join [ '', [ !Ref EnvironmentName, '-LB' ] ]
      Scheme: !Ref LBScheme
      SecurityGroups: 
        - !GetAtt VPC.DefaultSecurityGroup
        - !Ref InstanceSecurityGroup
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Join [ '', [ !Ref EnvironmentName, '-LB' ] ]
      Type: !Ref LBType

  HTTPlistener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WinTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: 'HTTP'
    DependsOn: [ ALB, WinTargetGroup ]

  WinTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Protocol: 'HTTP'
      Port: 80
      Name: WinHTTP
      TargetType: 'instance'
      Targets:
        - Id: !Ref EC2Instance1
        - Id: !Ref EC2Instance2
      VpcId: !Ref VPC
    DependsOn: ALB

##########################################################
##########################################################
Outputs:
  LBPublicDNS:
    Description: Public IP address of the newly created ALB
    Value:
      Fn::Join:
        - ''
        - - 'http://'
          - Fn::GetAtt: ALB.DNSName